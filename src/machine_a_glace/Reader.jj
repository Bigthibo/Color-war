options {
DEBUG_PARSER=false;
STATIC=false;
}
PARSER_BEGIN(Reader)
package machine_a_glace ;
import java.io.*;


public class Reader {

  
/** le support de lecture */
protected static java.io.Reader in;
protected static Reader parser = new Reader(System.in);

/** lecture d'une S-EXPR au terminal
* @return SEXPR : la SEXPR construite.
* @throws LispException une erreur de syntaxe
*/
public static Node read() throws JeuException{
  parser.ReInit(in);
  try { return parser.EXPR(); }
  catch ( ParseException e) {
	throw new JeuException(e);
    }
 }
 
/** lecture d'une S-EXPR à partir de la chaîne
* @param s : la chaîne
* @return SEXPR : la SEXPR construite.
* @throws LispException une erreur de syntaxe
*/
public static Node read(String s) throws JeuException{
  in = new StringReader(s);
  Node n =  read();
  return n;
}

Comportement StringtoComp(String s) {
	switch (s) {
	  case "X": return Comportement.Explore;
	  case "A": return Comportement.Attack;
	  default : throw new JeuException("Comportement non declarer");
	}
}
Operateur StringtoOp(String s) {
	switch(s) {
	case ";":return Operateur.PointVirgule;
	case ":":return Operateur.Deuxpoints;
	default: throw new JeuException("Operateur non declarer");
	}

}




}

PARSER_END(Reader)
// les caractères ignorés
SKIP :
{
" " | "\t" | "\r"| "\n"
// attention élimine la notion de fin de ligne
| "\u0000" | "\u0001" | "\u0002" | "\u0003" | "\u0004" | "\u0005" | "\u0006" | "\u0007"
| "\u0008" | "\u000B" | "\u000C" | "\u000E" | "\u000F" | "\u0010" | "\u0011" | "\u0012"
| "\u0013" | "\u0014" | "\u0015" | "\u0016" | "\u0017" | "\u0018" | "\u0019" | "\u001A"
| "\u001B" | "\u001C" | "\u001D" | "\u001E" | "\u001F" | "\u007F"
}
MORE :
{
"//" : IN_SL_COMMENT
| "/*" : IN_ML_COMMENT
}
<IN_SL_COMMENT> SPECIAL_TOKEN :{<SL_COMMENT: "\n" | "\r" | "\r\n"> : DEFAULT}
<IN_ML_COMMENT> SPECIAL_TOKEN :{<ML_COMMENT: "*/" > : DEFAULT}
<IN_SL_COMMENT,IN_ML_COMMENT> SKIP :{< ~[] >}// les lexèmes du langage
TOKEN :{
  < OP : ";" | ":" | "< " | " >" | "|" | "||" >
| < COMP: "X" | "C" | "D" | "K" >
| <LACC : "{">
| <RACC : "}"> 
}




Node EXPRbis(): {Node arbre, arbre2; Token c; } {
< LACC > arbre=EXPRbis() < RACC > arbre2=L(){return new Node(arbre2.Gram,arbre,arbre2.FD); }
| c=< COMP > arbre=L(){if (arbre != null)return new Node(arbre.Gram,new Node(StringtoComp(c.image)),arbre.FD);else return new Node(StringtoComp(c.image)); }

}

Node L() : { Node Arbre1; Token exp; } {
	 exp = <OP> Arbre1 = EXPRbis() {return new Node(StringtoOp(exp.image), null, Arbre1.FD); }
	 | { return null; }
  }

Node EXPR(): {Node arbre1, arbre2;} {
	< LACC > arbre1=EXPRbis() arbre2=L()< RACC > {if (arbre2 != null) return new Node(arbre2.Gram,arbre1,arbre2.FD); else return arbre1;}
}

